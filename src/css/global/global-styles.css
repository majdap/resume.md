/* Global styles based on excellent content from https://piccalil.li/complete-css */

/* @link https://utopia.fyi/type/calculator?c=320,10,1.2,1240,14,1.25,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12 */

:root {
  --size-step--2: clamp(0.434rem, 0.3902rem + 0.2191vw, 0.56rem);
  --size-step--1: clamp(0.5208rem, 0.4585rem + 0.3116vw, 0.7rem);
  --size-step-0: clamp(0.625rem, 0.538rem + 0.4348vw, 0.875rem);
  --size-step-1: clamp(0.75rem, 0.6304rem + 0.5978vw, 1.0938rem);
  --size-step-2: clamp(0.9rem, 0.7375rem + 0.8125vw, 1.3672rem);
  --size-step-3: clamp(1.08rem, 0.8612rem + 1.0939vw, 1.709rem);
  --size-step-4: clamp(1.296rem, 1.0037rem + 1.4613vw, 2.1362rem);
  --size-step-5: clamp(1.5552rem, 1.1673rem + 1.9393vw, 2.6703rem);
  --size-step-6: clamp(1.8662rem, 1.3544rem + 2.5593vw, 3.3379rem);

  /* @link https://utopia.fyi/space/calculator?c=320,10,1.2,1240,14,1.25,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12 */

  --space-3xs: clamp(0.1875rem, 0.1658rem + 0.1087vw, 0.25rem);
  --space-2xs: clamp(0.3125rem, 0.269rem + 0.2174vw, 0.4375rem);
  --space-xs: clamp(0.5rem, 0.4348rem + 0.3261vw, 0.6875rem);
  --space-s: clamp(0.625rem, 0.538rem + 0.4348vw, 0.875rem);
  --space-m: clamp(0.9375rem, 0.8071rem + 0.6522vw, 1.3125rem);
  --space-l: clamp(1.25rem, 1.0761rem + 0.8696vw, 1.75rem);
  --space-xl: clamp(1.875rem, 1.6141rem + 1.3043vw, 2.625rem);
  --space-2xl: clamp(2.5rem, 2.1522rem + 1.7391vw, 3.5rem);
  --space-3xl: clamp(3.75rem, 3.2283rem + 2.6087vw, 5.25rem);

  /* One-up pairs */
  --space-3xs-2xs: clamp(0.1875rem, 0.1005rem + 0.4348vw, 0.4375rem);
  --space-2xs-xs: clamp(0.3125rem, 0.1821rem + 0.6522vw, 0.6875rem);
  --space-xs-s: clamp(0.5rem, 0.3696rem + 0.6522vw, 0.875rem);
  --space-s-m: clamp(0.625rem, 0.3859rem + 1.1957vw, 1.3125rem);
  --space-m-l: clamp(0.9375rem, 0.6549rem + 1.413vw, 1.75rem);
  --space-l-xl: clamp(1.25rem, 0.7717rem + 2.3913vw, 2.625rem);
  --space-xl-2xl: clamp(1.875rem, 1.3098rem + 2.8261vw, 3.5rem);
  --space-2xl-3xl: clamp(2.5rem, 1.5435rem + 4.7826vw, 5.25rem);

  /* Custom pairs */
  --space-s-l: clamp(0.625rem, 0.2337rem + 1.9565vw, 1.75rem);

  --gutter: var(--space-xl);
  --transition-base: 250ms ease;
  --transition-movement: 200ms linear;
  --transition-fade: 300ms ease;
  --transition-bounce: 500ms cubic-bezier(0.5, 0.05, 0.2, 1.5);
  --stroke: 1px dashed var(--color-mid);
  --stroke-solid: 1px solid var(--color-mid);
  --radius-s: 0.2rem;
  --radius-m: 0.75rem;
  --radius-l: 2.5rem;
  --uppercase-kerning: 0.04ch;

  --font-base: "Martian Mono";
  --font-mono: "Martian Mono";
  --font-bold: 700;
  --font-medium: 400;
}

body {
  background: var(--color-light);
  color: var(--color-dark);
  font-size: var(--size-step-1);
  /* font-family: var(--font-base); */
  line-height: var(--leading-standard);
  font-size-adjust: from-font;
  margin: 0;
}

:is(h1, h2, h3, h4) {
  line-height: var(--leading-fine, 1.1);
  text-wrap: balance;
}

h1 {
  font-size: var(--size-step-6);
  /* max-width: 20ch; */
}

h2 {
  font-size: var(--size-step-5);
  max-width: 35ch;
}

h3 {
  font-size: var(--size-step-4);
  max-width: 35ch;
}

:is(h4, h5, h6) {
  font-size: var(--size-step-3);
}

small {
  font-size: var(--size-step-0);
}

ins {
  text-decoration: none;
  background: var(--color-primary);
  color: var(--color-dark);
  padding-inline: 0.3em;
}

:is(code, kbd, samp) {
  font-family: var(--font-mono);
  padding: 0.2em 0.2em 0.05em 0.2em;
  hyphens: none;
  tab-size: 2;
  text-align: left;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  box-decoration-break: clone;
}

/* This is quite a new property, so we want code styles to at least, not be huge or tiny */
@supports not (font-size-adjust: from-font) {
  :is(code, kbd, samp) {
    font-size: 0.8em;
  }
}

pre:has(code) {
  width: max-content;
  max-width: 100%;
  overflow-x: auto;
}

pre code {
  border: none;
  background: none;
  padding: 0;
}

kbd {
  border: 1px solid;
  padding-block-end: 0.1em;
}

var {
  font-style: normal;
  font-weight: var(--font-medium);
}

q {
  font-style: italic;
}

ul:not([class]) {
  padding-inline-start: 1.7ch;
  list-style-type: disc;
}

ul:not([class]) > li {
  padding-inline-start: var(--space-xs);
}

:is(ol, ul):not([class]) li + * {
  margin-block-start: var(--flow-space, var(--space-xs));
}

ul ::marker {
  font-size: 0.8lh;
}

ol ::marker {
  font-size: 1em;
  font-weight: var(--font-bold);
}

/* Lists with classes and roles will be out of standard flow, so remove the default spacing */
[role="list"][class],
[role="tablist"][class] {
  margin-block: 0;
  padding: 0;
}

dt {
  font-weight: var(--font-medium);
}

dt + dd {
  margin-block-start: var(--space-xs);
}

dd + dt {
  margin-block-start: var(--space-s);
}

dd {
  margin-inline-start: 1.5ch;
}

blockquote {
  margin-inline: 0;
  /* color: var(--color-primary); */
}

blockquote footer {
  margin-block-start: var(--space-s);
  color: var(--color-dark);
  font-size: var(--size-step-0);
}

blockquote q {
  font-style: normal;
}

:is(video, iframe[src*="youtube"], iframe[src*="vimeo"]) {
  display: block;
  width: 100%;
  height: auto;
  aspect-ratio: 16/9;
}

img {
  height: auto;
  max-width: 100%;
  display: block;
}

figcaption {
  padding-block-start: 0.5em;
  font-size: var(--size-step-0);
  font-family: monospace;
}

table {
  border: var(--stroke);
  border-collapse: collapse;
  width: 100%;
}

th {
  text-align: left;
  font-weight: var(--font-bold);
  line-height: var(--leading-fine);
}

thead th {
  padding-block: var(--space-s);
}

td,
th {
  padding: var(--space-xs) var(--space-s);
}

th:not(:only-of-type) {
  border-block-end: var(--stroke);
}

th:only-of-type {
  border-inline-end: var(--stroke);
}

:is(th, td) ~ :is(th, td) {
  border-inline-start: var(--stroke);
}

tr + tr :is(th, td) {
  border-block-start: var(--stroke);
}

caption {
  caption-side: bottom;
  margin-block-start: var(--space-s);
}

a:not([class]):hover {
  text-underline-offset: 0.2lh;
}

:is(h1, h2, h3, h4) a:not([class]) {
  text-decoration-thickness: 0.1ex;
  text-underline-offset: 0.2ex;
}

:is(h1, h2, h3, h4) a:not([class]):hover {
  text-underline-offset: 0.3ex;
}

:focus {
  outline: none;
}

:focus-visible {
  outline: 2px solid var(--focus-color, currentColor);
  outline-offset: var(--focus-offset, 0.2lh);
}

/* Firefox is the only browser that doesn't outline the whole element unless you make it display: inline-block. That in itself causes multiple flow issues so we can detect it, using its own vendor prefix and reduce focus offset
*/
@supports (-moz-appearance: none) {
  :root {
    --focus-offset: 0.08em;
  }
}

:target {
  scroll-margin-block: 5lh;
}

::selection {
  color: var(--color-light);
  background: var(--color-dark);
}

hr {
  border: none;
  border-block-start: var(--stroke);
  margin-block: var(--flow-space, var(--space-xl));
}

svg:not([class]) {
  width: auto;
  height: 1lh;
}

svg {
  flex-shrink: 0;
}

svg[role="img"][width][height] {
  width: revert;
  height: revert;
  background: var(--color-light);
  padding: var(--space-xs);
}

/* There's a .flow composition, but this prevents forms from having to have that applied where markup is harder to control in certain systems. It still uses the --flow-space variables though to make managing space easier */
form > * + * {
  margin-top: var(--flow-space, 1rem);
}

:is(input, select, textarea) {
  accent-color: var(--color-primary);
}

:is(
    input:not([type="checkbox"], [type="radio"], [type="color"]),
    select,
    textarea
  ) {
  padding: 0.5em 0.8em;
  border-radius: var(--radius-s);
  border: var(--stroke-solid);
  background: var(--color-light);
  color: var(--color-dark);
  width: 100%;

  &::placeholder {
    color: var(--color-mid);
    opacity: 1;
  }
}

label {
  line-height: var(--leading-fine);
  font-weight: var(--font-medium);
}

label::after {
  content: "\A";
  white-space: pre;
}

/* Usually label wraps checkbox and radio buttons, so we give ourselves more layout and text-flow control with flex */
label:has(input) {
  display: flex;
  align-items: baseline;
  gap: var(--space-s);
  font-weight: var(--font-normal);
}

label:has(input) + label:has(input) {
  --flow-spce: var(--space-s-m);
}

/* Slightly adjusts the vertical position of the check/radio */
label:has(input) input {
  transform: translateY(-0.1ex);
}

input:disabled {
  background: var(--color-mid);
}

input:disabled,
label input:disabled + * {
  cursor: not-allowed;
}

fieldset {
  border: var(--stroke);
  padding: var(--space-s);
}

legend {
  font-weight: var(--font-medium);
  padding-inline: var(--space-xs);
}

summary {
  font-weight: var(--font-bold);
  cursor: pointer;
}

details[open] summary {
  margin-block-end: var(--space-s);
}

/* CUSTOM STYLES */
:is(textarea) {
  resize: vertical;
}
